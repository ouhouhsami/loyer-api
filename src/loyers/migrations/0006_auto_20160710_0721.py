# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-10 07:21
from __future__ import unicode_literals

from django.db import migrations

def transfer(apps, schema_editor):
    Loyer = apps.get_model("loyers", "Loyer")
    Observatory = apps.get_model("loyers", "Observatory")
    Agglomeration = apps.get_model("loyers", "Agglomeration")
    AgglomerationDescription = apps.get_model("loyers", "AgglomerationDescription")
    HousingType = apps.get_model("loyers", "HousingType")
    ConstructionPeriod = apps.get_model("loyers", "ConstructionPeriod")
    RenterSeniority = apps.get_model("loyers", "RenterSeniority")
    NumberOfRooms = apps.get_model("loyers", "NumberOfRooms")
    ProductionMethodology = apps.get_model("loyers", "ProductionMethodology")
    loyers = Loyer.objects.all()
    for loyer in loyers:
        # fix err data type conversion
        if loyer.nombre_logements is '':
            loyer.nombre_logements = None
        if loyer.loyer_mensuel_1_decile is '':
            loyer.loyer_mensuel_1_decile = None
        if loyer.loyer_mensuel_1_quartile is '':
            loyer.loyer_mensuel_1_quartile = None
        if loyer.loyer_mensuel_median is '':
            loyer.loyer_mensuel_median = None
        if loyer.loyer_mensuel_3_quartile is '':
            loyer.loyer_mensuel_3_quartile = None
        if loyer.loyer_mensuel_9_decile is '':
            loyer.loyer_mensuel_9_decile = None
        if loyer.moyenne_loyer_mensuel is '':
            loyer.moyenne_loyer_mensuel = None
        if loyer.surface_moyenne is '':
            loyer.surface_moyenne = None
        if loyer.nombre_obsservations is '':
            loyer.nombre_obsservations = None
        if loyer.nombre_logements is '':
            loyer.nombre_logements = None
        if loyer.loyer_1_decile is '':
            loyer.loyer_1_decile = None
        if loyer.loyer_1_quartile is '':
            loyer.loyer_1_quartile = None
        if loyer.loyer_median is '':
            loyer.loyer_median = None
        if loyer.loyer_3_quartile is '':
            loyer.loyer_3_quartile = None
        if loyer.loyer_9_decile is '':
            loyer.loyer_9_decile = None
        if loyer.loyer_moyen is '':
            loyer.loyer_moyen = None

        # create fk
        if loyer.Observatory is not '':
            observatory, created = Observatory.objects.get_or_create(name=loyer.Observatory)
            loyer.observatory_link = observatory

        if loyer.agglomeration is not '':
            agglomeration, created = Agglomeration.objects.get_or_create(name=loyer.agglomeration)
            loyer.agglomeration_link = agglomeration

        if loyer.Zone_complementaire is not '':
            agglomeration_description, created = AgglomerationDescription.objects.get_or_create(name=loyer.Zone_complementaire)
            loyer.agglomeration_description_link = agglomeration_description

        if loyer.Type_habitat is not '':
            housing_type, created = HousingType.objects.get_or_create(name=loyer.Type_habitat)
            loyer.housing_type_link = housing_type

        if loyer.epoque_construction_homogene is not '':
            construction_period, created = ConstructionPeriod.objects.get_or_create(name=loyer.epoque_construction_homogene)
            loyer.construction_period_link = construction_period

        if loyer.anciennete_locataire_homogene is not '':
            renter_seniority, created = RenterSeniority.objects.get_or_create(name=loyer.anciennete_locataire_homogene)
            loyer.renter_seniority_link = renter_seniority

        if loyer.nombre_pieces_homogene is not '':
            number_of_rooms, created = NumberOfRooms.objects.get_or_create(name=loyer.nombre_pieces_homogene)
            loyer.number_of_rooms_link = number_of_rooms

        if loyer.methodologie_production is not '':
            production_methodology, created = ProductionMethodology.objects.get_or_create(name=loyer.methodologie_production)
            loyer.production_methodology_link = production_methodology

        loyer.save()

def reverse_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('loyers', '0005_auto_20160710_0720'),
    ]

    operations = [
        migrations.RunPython(transfer, reverse_func),
    ]
